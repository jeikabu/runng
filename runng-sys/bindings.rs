/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const NNG_MAJOR_VERSION: u32 = 1;
pub const NNG_MINOR_VERSION: u32 = 1;
pub const NNG_PATCH_VERSION: u32 = 1;
pub const NNG_RELEASE_SUFFIX: &'static [u8; 1usize] = b"\0";
pub const NNG_MAXADDRLEN: u32 = 128;
pub const NNG_DURATION_INFINITE: i32 = -1;
pub const NNG_DURATION_DEFAULT: i32 = -2;
pub const NNG_DURATION_ZERO: u32 = 0;
pub const NNG_OPT_SOCKNAME: &'static [u8; 12usize] = b"socket-name\0";
pub const NNG_OPT_RAW: &'static [u8; 4usize] = b"raw\0";
pub const NNG_OPT_PROTO: &'static [u8; 9usize] = b"protocol\0";
pub const NNG_OPT_PROTONAME: &'static [u8; 14usize] = b"protocol-name\0";
pub const NNG_OPT_PEER: &'static [u8; 5usize] = b"peer\0";
pub const NNG_OPT_PEERNAME: &'static [u8; 10usize] = b"peer-name\0";
pub const NNG_OPT_RECVBUF: &'static [u8; 12usize] = b"recv-buffer\0";
pub const NNG_OPT_SENDBUF: &'static [u8; 12usize] = b"send-buffer\0";
pub const NNG_OPT_RECVFD: &'static [u8; 8usize] = b"recv-fd\0";
pub const NNG_OPT_SENDFD: &'static [u8; 8usize] = b"send-fd\0";
pub const NNG_OPT_RECVTIMEO: &'static [u8; 13usize] = b"recv-timeout\0";
pub const NNG_OPT_SENDTIMEO: &'static [u8; 13usize] = b"send-timeout\0";
pub const NNG_OPT_LOCADDR: &'static [u8; 14usize] = b"local-address\0";
pub const NNG_OPT_REMADDR: &'static [u8; 15usize] = b"remote-address\0";
pub const NNG_OPT_URL: &'static [u8; 4usize] = b"url\0";
pub const NNG_OPT_MAXTTL: &'static [u8; 8usize] = b"ttl-max\0";
pub const NNG_OPT_RECVMAXSZ: &'static [u8; 14usize] = b"recv-size-max\0";
pub const NNG_OPT_RECONNMINT: &'static [u8; 19usize] = b"reconnect-time-min\0";
pub const NNG_OPT_RECONNMAXT: &'static [u8; 19usize] = b"reconnect-time-max\0";
pub const NNG_OPT_TLS_CONFIG: &'static [u8; 11usize] = b"tls-config\0";
pub const NNG_OPT_TLS_AUTH_MODE: &'static [u8; 13usize] = b"tls-authmode\0";
pub const NNG_OPT_TLS_CERT_KEY_FILE: &'static [u8; 18usize] = b"tls-cert-key-file\0";
pub const NNG_OPT_TLS_CA_FILE: &'static [u8; 12usize] = b"tls-ca-file\0";
pub const NNG_OPT_TLS_SERVER_NAME: &'static [u8; 16usize] = b"tls-server-name\0";
pub const NNG_OPT_TLS_VERIFIED: &'static [u8; 13usize] = b"tls-verified\0";
pub const NNG_OPT_TCP_NODELAY: &'static [u8; 12usize] = b"tcp-nodelay\0";
pub const NNG_OPT_TCP_KEEPALIVE: &'static [u8; 14usize] = b"tcp-keepalive\0";
pub const NNG_OPT_PAIR1_POLY: &'static [u8; 18usize] = b"pair1:polyamorous\0";
pub const NNG_OPT_SUB_SUBSCRIBE: &'static [u8; 14usize] = b"sub:subscribe\0";
pub const NNG_OPT_SUB_UNSUBSCRIBE: &'static [u8; 16usize] = b"sub:unsubscribe\0";
pub const NNG_OPT_REQ_RESENDTIME: &'static [u8; 16usize] = b"req:resend-time\0";
pub const NNG_OPT_SURVEYOR_SURVEYTIME: &'static [u8; 21usize] = b"surveyor:survey-time\0";
pub const NNG_OPT_IPC_SECURITY_DESCRIPTOR: &'static [u8; 24usize] = b"ipc:security-descriptor\0";
pub const NNG_OPT_IPC_PERMISSIONS: &'static [u8; 16usize] = b"ipc:permissions\0";
pub const NNG_OPT_IPC_PEER_UID: &'static [u8; 13usize] = b"ipc:peer-uid\0";
pub const NNG_OPT_IPC_PEER_GID: &'static [u8; 13usize] = b"ipc:peer-gid\0";
pub const NNG_OPT_IPC_PEER_PID: &'static [u8; 13usize] = b"ipc:peer-pid\0";
pub const NNG_OPT_IPC_PEER_ZONEID: &'static [u8; 16usize] = b"ipc:peer-zoneid\0";
pub const NNG_OPT_WS_REQUEST_HEADERS: &'static [u8; 19usize] = b"ws:request-headers\0";
pub const NNG_OPT_WS_RESPONSE_HEADERS: &'static [u8; 20usize] = b"ws:response-headers\0";
pub const NNG_OPT_WSS_REQUEST_HEADERS: &'static [u8; 19usize] = b"ws:request-headers\0";
pub const NNG_OPT_WSS_RESPONSE_HEADERS: &'static [u8; 20usize] = b"ws:response-headers\0";
pub const NNG_OPT_ZT_HOME: &'static [u8; 8usize] = b"zt:home\0";
pub const NNG_OPT_ZT_NWID: &'static [u8; 8usize] = b"zt:nwid\0";
pub const NNG_OPT_ZT_NODE: &'static [u8; 8usize] = b"zt:node\0";
pub const NNG_OPT_ZT_NETWORK_STATUS: &'static [u8; 18usize] = b"zt:network-status\0";
pub const NNG_OPT_ZT_NETWORK_NAME: &'static [u8; 16usize] = b"zt:network-name\0";
pub const NNG_OPT_ZT_PING_TIME: &'static [u8; 13usize] = b"zt:ping-time\0";
pub const NNG_OPT_ZT_PING_TRIES: &'static [u8; 14usize] = b"zt:ping-tries\0";
pub const NNG_OPT_ZT_CONN_TIME: &'static [u8; 13usize] = b"zt:conn-time\0";
pub const NNG_OPT_ZT_CONN_TRIES: &'static [u8; 14usize] = b"zt:conn-tries\0";
pub const NNG_OPT_ZT_MTU: &'static [u8; 7usize] = b"zt:mtu\0";
pub const NNG_OPT_ZT_ORBIT: &'static [u8; 9usize] = b"zt:orbit\0";
pub const NNG_OPT_ZT_DEORBIT: &'static [u8; 11usize] = b"zt:deorbit\0";
pub const NNG_OPT_ZT_ADD_LOCAL_ADDR: &'static [u8; 18usize] = b"zt:add-local-addr\0";
pub const NNG_OPT_ZT_CLEAR_LOCAL_ADDRS: &'static [u8; 21usize] = b"zt:clear-local-addrs\0";
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_ctx_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_ctx_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_ctx_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_ctx_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_ctx_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_ctx_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_ctx_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_ctx = nng_ctx_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_dialer_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_dialer_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_dialer_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_dialer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_dialer_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_dialer_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_dialer_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_dialer_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_dialer = nng_dialer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_listener_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_listener_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_listener_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_listener_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_listener_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_listener_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_listener_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_listener_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_listener = nng_listener_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_pipe_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_pipe_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_pipe_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_pipe_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_pipe_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_pipe_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_pipe_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_pipe_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_pipe = nng_pipe_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_socket_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_socket_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_socket_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_socket_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_socket_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_socket_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_socket_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_socket_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_socket = nng_socket_s;
pub type nng_duration = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_msg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_stat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_aio {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nng_sockaddr_inproc {
    pub sa_family: u16,
    pub sa_name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr_inproc() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_inproc>(),
        130usize,
        concat!("Size of: ", stringify!(nng_sockaddr_inproc))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_inproc>(),
        2usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_inproc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_inproc>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_inproc),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_inproc>())).sa_name as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_inproc),
            "::",
            stringify!(sa_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nng_sockaddr_path {
    pub sa_family: u16,
    pub sa_path: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr_path() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_path>(),
        130usize,
        concat!("Size of: ", stringify!(nng_sockaddr_path))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_path>(),
        2usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_path>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_path),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_path>())).sa_path as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_path),
            "::",
            stringify!(sa_path)
        )
    );
}
pub type nng_sockaddr_ipc = nng_sockaddr_path;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_in6 {
    pub sa_family: u16,
    pub sa_port: u16,
    pub sa_addr: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_in6>(),
        20usize,
        concat!("Size of: ", stringify!(nng_sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_in6>(),
        2usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in6>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in6),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in6>())).sa_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in6),
            "::",
            stringify!(sa_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in6>())).sa_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in6),
            "::",
            stringify!(sa_addr)
        )
    );
}
pub type nng_sockaddr_udp6 = nng_sockaddr_in6;
pub type nng_sockaddr_tcp6 = nng_sockaddr_in6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_in {
    pub sa_family: u16,
    pub sa_port: u16,
    pub sa_addr: u32,
}
#[test]
fn bindgen_test_layout_nng_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_in>(),
        8usize,
        concat!("Size of: ", stringify!(nng_sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in>())).sa_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in),
            "::",
            stringify!(sa_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in>())).sa_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in),
            "::",
            stringify!(sa_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_zt {
    pub sa_family: u16,
    pub sa_nwid: u64,
    pub sa_nodeid: u64,
    pub sa_port: u32,
}
#[test]
fn bindgen_test_layout_nng_sockaddr_zt() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_zt>(),
        32usize,
        concat!("Size of: ", stringify!(nng_sockaddr_zt))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_zt>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_zt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_nwid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_nodeid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_nodeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_port as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_port)
        )
    );
}
pub type nng_sockaddr_udp = nng_sockaddr_in;
pub type nng_sockaddr_tcp = nng_sockaddr_in;
#[repr(C)]
#[derive(Copy, Clone)]
pub union nng_sockaddr {
    pub s_family: u16,
    pub s_ipc: nng_sockaddr_ipc,
    pub s_inproc: nng_sockaddr_inproc,
    pub s_in6: nng_sockaddr_in6,
    pub s_in: nng_sockaddr_in,
    pub s_zt: nng_sockaddr_zt,
    _bindgen_union_align: [u64; 17usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr>(),
        136usize,
        concat!("Size of: ", stringify!(nng_sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_ipc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_ipc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_inproc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_inproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_in6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_in6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_in as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_zt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_zt)
        )
    );
}
pub const nng_sockaddr_family_NNG_AF_UNSPEC: nng_sockaddr_family = 0;
pub const nng_sockaddr_family_NNG_AF_INPROC: nng_sockaddr_family = 1;
pub const nng_sockaddr_family_NNG_AF_IPC: nng_sockaddr_family = 2;
pub const nng_sockaddr_family_NNG_AF_INET: nng_sockaddr_family = 3;
pub const nng_sockaddr_family_NNG_AF_INET6: nng_sockaddr_family = 4;
pub const nng_sockaddr_family_NNG_AF_ZT: nng_sockaddr_family = 5;
pub type nng_sockaddr_family = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_iov {
    pub iov_buf: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_nng_iov() {
    assert_eq!(
        ::std::mem::size_of::<nng_iov>(),
        16usize,
        concat!("Size of: ", stringify!(nng_iov))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_iov>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_iov))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_iov>())).iov_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_iov),
            "::",
            stringify!(iov_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_iov>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_iov),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_nng_fini"]
    pub fn nng_fini();
}
extern "C" {
    #[link_name = "\u{1}_nng_close"]
    pub fn nng_close(arg1: nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_socket_id"]
    pub fn nng_socket_id(arg1: nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_closeall"]
    pub fn nng_closeall();
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt"]
    pub fn nng_setopt(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_bool"]
    pub fn nng_setopt_bool(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_int"]
    pub fn nng_setopt_int(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_ms"]
    pub fn nng_setopt_ms(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_size"]
    pub fn nng_setopt_size(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_uint64"]
    pub fn nng_setopt_uint64(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_string"]
    pub fn nng_setopt_string(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_setopt_ptr"]
    pub fn nng_setopt_ptr(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt"]
    pub fn nng_getopt(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_bool"]
    pub fn nng_getopt_bool(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_int"]
    pub fn nng_getopt_int(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_ms"]
    pub fn nng_getopt_ms(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_size"]
    pub fn nng_getopt_size(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_uint64"]
    pub fn nng_getopt_uint64(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_ptr"]
    pub fn nng_getopt_ptr(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const nng_pipe_ev_NNG_PIPE_EV_ADD_PRE: nng_pipe_ev = 0;
pub const nng_pipe_ev_NNG_PIPE_EV_ADD_POST: nng_pipe_ev = 1;
pub const nng_pipe_ev_NNG_PIPE_EV_REM_POST: nng_pipe_ev = 2;
pub const nng_pipe_ev_NNG_PIPE_EV_NUM: nng_pipe_ev = 3;
pub type nng_pipe_ev = u32;
pub type nng_pipe_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: nng_pipe,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_nng_pipe_notify"]
    pub fn nng_pipe_notify(
        arg1: nng_socket,
        arg2: ::std::os::raw::c_int,
        arg3: nng_pipe_cb,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_getopt_string"]
    pub fn nng_getopt_string(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listen"]
    pub fn nng_listen(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_listener,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dial"]
    pub fn nng_dial(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_dialer,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_create"]
    pub fn nng_dialer_create(
        arg1: *mut nng_dialer,
        arg2: nng_socket,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_create"]
    pub fn nng_listener_create(
        arg1: *mut nng_listener,
        arg2: nng_socket,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_start"]
    pub fn nng_dialer_start(arg1: nng_dialer, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_start"]
    pub fn nng_listener_start(
        arg1: nng_listener,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_close"]
    pub fn nng_dialer_close(arg1: nng_dialer) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_close"]
    pub fn nng_listener_close(arg1: nng_listener) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_id"]
    pub fn nng_dialer_id(arg1: nng_dialer) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_id"]
    pub fn nng_listener_id(arg1: nng_listener) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt"]
    pub fn nng_dialer_setopt(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_bool"]
    pub fn nng_dialer_setopt_bool(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_int"]
    pub fn nng_dialer_setopt_int(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_ms"]
    pub fn nng_dialer_setopt_ms(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_size"]
    pub fn nng_dialer_setopt_size(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_uint64"]
    pub fn nng_dialer_setopt_uint64(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_ptr"]
    pub fn nng_dialer_setopt_ptr(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_setopt_string"]
    pub fn nng_dialer_setopt_string(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt"]
    pub fn nng_dialer_getopt(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_bool"]
    pub fn nng_dialer_getopt_bool(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_int"]
    pub fn nng_dialer_getopt_int(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_ms"]
    pub fn nng_dialer_getopt_ms(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_size"]
    pub fn nng_dialer_getopt_size(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_sockaddr"]
    pub fn nng_dialer_getopt_sockaddr(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_uint64"]
    pub fn nng_dialer_getopt_uint64(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_ptr"]
    pub fn nng_dialer_getopt_ptr(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_dialer_getopt_string"]
    pub fn nng_dialer_getopt_string(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt"]
    pub fn nng_listener_setopt(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_bool"]
    pub fn nng_listener_setopt_bool(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_int"]
    pub fn nng_listener_setopt_int(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_ms"]
    pub fn nng_listener_setopt_ms(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_size"]
    pub fn nng_listener_setopt_size(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_uint64"]
    pub fn nng_listener_setopt_uint64(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_ptr"]
    pub fn nng_listener_setopt_ptr(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_setopt_string"]
    pub fn nng_listener_setopt_string(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt"]
    pub fn nng_listener_getopt(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_bool"]
    pub fn nng_listener_getopt_bool(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_int"]
    pub fn nng_listener_getopt_int(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_ms"]
    pub fn nng_listener_getopt_ms(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_size"]
    pub fn nng_listener_getopt_size(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_sockaddr"]
    pub fn nng_listener_getopt_sockaddr(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_uint64"]
    pub fn nng_listener_getopt_uint64(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_ptr"]
    pub fn nng_listener_getopt_ptr(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_listener_getopt_string"]
    pub fn nng_listener_getopt_string(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_strerror"]
    pub fn nng_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_nng_send"]
    pub fn nng_send(
        arg1: nng_socket,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_recv"]
    pub fn nng_recv(
        arg1: nng_socket,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_sendmsg"]
    pub fn nng_sendmsg(
        arg1: nng_socket,
        arg2: *mut nng_msg,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_recvmsg"]
    pub fn nng_recvmsg(
        arg1: nng_socket,
        arg2: *mut *mut nng_msg,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_send_aio"]
    pub fn nng_send_aio(arg1: nng_socket, arg2: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_recv_aio"]
    pub fn nng_recv_aio(arg1: nng_socket, arg2: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_open"]
    pub fn nng_ctx_open(arg1: *mut nng_ctx, arg2: nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_close"]
    pub fn nng_ctx_close(arg1: nng_ctx) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_id"]
    pub fn nng_ctx_id(arg1: nng_ctx) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_recv"]
    pub fn nng_ctx_recv(arg1: nng_ctx, arg2: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_send"]
    pub fn nng_ctx_send(arg1: nng_ctx, arg2: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_getopt"]
    pub fn nng_ctx_getopt(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_getopt_bool"]
    pub fn nng_ctx_getopt_bool(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_getopt_int"]
    pub fn nng_ctx_getopt_int(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_getopt_ms"]
    pub fn nng_ctx_getopt_ms(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_getopt_size"]
    pub fn nng_ctx_getopt_size(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_setopt"]
    pub fn nng_ctx_setopt(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_setopt_bool"]
    pub fn nng_ctx_setopt_bool(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_setopt_int"]
    pub fn nng_ctx_setopt_int(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_setopt_ms"]
    pub fn nng_ctx_setopt_ms(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ctx_setopt_size"]
    pub fn nng_ctx_setopt_size(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_alloc"]
    pub fn nng_alloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_nng_free"]
    pub fn nng_free(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    #[link_name = "\u{1}_nng_strdup"]
    pub fn nng_strdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_nng_strfree"]
    pub fn nng_strfree(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_alloc"]
    pub fn nng_aio_alloc(
        arg1: *mut *mut nng_aio,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_free"]
    pub fn nng_aio_free(arg1: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_stop"]
    pub fn nng_aio_stop(arg1: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_result"]
    pub fn nng_aio_result(arg1: *mut nng_aio) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_count"]
    pub fn nng_aio_count(arg1: *mut nng_aio) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_cancel"]
    pub fn nng_aio_cancel(arg1: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_abort"]
    pub fn nng_aio_abort(arg1: *mut nng_aio, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_wait"]
    pub fn nng_aio_wait(arg1: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_set_msg"]
    pub fn nng_aio_set_msg(arg1: *mut nng_aio, arg2: *mut nng_msg);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_get_msg"]
    pub fn nng_aio_get_msg(arg1: *mut nng_aio) -> *mut nng_msg;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_set_input"]
    pub fn nng_aio_set_input(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_get_input"]
    pub fn nng_aio_get_input(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_set_output"]
    pub fn nng_aio_set_output(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_get_output"]
    pub fn nng_aio_get_output(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_set_timeout"]
    pub fn nng_aio_set_timeout(arg1: *mut nng_aio, arg2: nng_duration);
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_set_iov"]
    pub fn nng_aio_set_iov(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
        arg3: *const nng_iov,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_begin"]
    pub fn nng_aio_begin(arg1: *mut nng_aio) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_nng_aio_finish"]
    pub fn nng_aio_finish(arg1: *mut nng_aio, arg2: ::std::os::raw::c_int);
}
pub type nng_aio_cancelfn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut nng_aio,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_nng_aio_defer"]
    pub fn nng_aio_defer(
        arg1: *mut nng_aio,
        arg2: nng_aio_cancelfn,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_nng_sleep_aio"]
    pub fn nng_sleep_aio(arg1: nng_duration, arg2: *mut nng_aio);
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_alloc"]
    pub fn nng_msg_alloc(arg1: *mut *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_free"]
    pub fn nng_msg_free(arg1: *mut nng_msg);
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_realloc"]
    pub fn nng_msg_realloc(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header"]
    pub fn nng_msg_header(arg1: *mut nng_msg) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_len"]
    pub fn nng_msg_header_len(arg1: *const nng_msg) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_body"]
    pub fn nng_msg_body(arg1: *mut nng_msg) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_len"]
    pub fn nng_msg_len(arg1: *const nng_msg) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_append"]
    pub fn nng_msg_append(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_insert"]
    pub fn nng_msg_insert(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_trim"]
    pub fn nng_msg_trim(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_chop"]
    pub fn nng_msg_chop(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_append"]
    pub fn nng_msg_header_append(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_insert"]
    pub fn nng_msg_header_insert(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_trim"]
    pub fn nng_msg_header_trim(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_chop"]
    pub fn nng_msg_header_chop(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_append_u16"]
    pub fn nng_msg_header_append_u16(arg1: *mut nng_msg, arg2: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_append_u32"]
    pub fn nng_msg_header_append_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_append_u64"]
    pub fn nng_msg_header_append_u64(arg1: *mut nng_msg, arg2: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_insert_u16"]
    pub fn nng_msg_header_insert_u16(arg1: *mut nng_msg, arg2: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_insert_u32"]
    pub fn nng_msg_header_insert_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_insert_u64"]
    pub fn nng_msg_header_insert_u64(arg1: *mut nng_msg, arg2: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_chop_u16"]
    pub fn nng_msg_header_chop_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_chop_u32"]
    pub fn nng_msg_header_chop_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_chop_u64"]
    pub fn nng_msg_header_chop_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_trim_u16"]
    pub fn nng_msg_header_trim_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_trim_u32"]
    pub fn nng_msg_header_trim_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_trim_u64"]
    pub fn nng_msg_header_trim_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_append_u16"]
    pub fn nng_msg_append_u16(arg1: *mut nng_msg, arg2: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_append_u32"]
    pub fn nng_msg_append_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_append_u64"]
    pub fn nng_msg_append_u64(arg1: *mut nng_msg, arg2: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_insert_u16"]
    pub fn nng_msg_insert_u16(arg1: *mut nng_msg, arg2: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_insert_u32"]
    pub fn nng_msg_insert_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_insert_u64"]
    pub fn nng_msg_insert_u64(arg1: *mut nng_msg, arg2: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_chop_u16"]
    pub fn nng_msg_chop_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_chop_u32"]
    pub fn nng_msg_chop_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_chop_u64"]
    pub fn nng_msg_chop_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_trim_u16"]
    pub fn nng_msg_trim_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_trim_u32"]
    pub fn nng_msg_trim_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_trim_u64"]
    pub fn nng_msg_trim_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_dup"]
    pub fn nng_msg_dup(arg1: *mut *mut nng_msg, arg2: *const nng_msg) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_clear"]
    pub fn nng_msg_clear(arg1: *mut nng_msg);
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_header_clear"]
    pub fn nng_msg_header_clear(arg1: *mut nng_msg);
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_set_pipe"]
    pub fn nng_msg_set_pipe(arg1: *mut nng_msg, arg2: nng_pipe);
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_get_pipe"]
    pub fn nng_msg_get_pipe(arg1: *const nng_msg) -> nng_pipe;
}
extern "C" {
    #[link_name = "\u{1}_nng_msg_getopt"]
    pub fn nng_msg_getopt(
        arg1: *mut nng_msg,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt"]
    pub fn nng_pipe_getopt(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_bool"]
    pub fn nng_pipe_getopt_bool(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_int"]
    pub fn nng_pipe_getopt_int(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_ms"]
    pub fn nng_pipe_getopt_ms(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_size"]
    pub fn nng_pipe_getopt_size(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_sockaddr"]
    pub fn nng_pipe_getopt_sockaddr(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_uint64"]
    pub fn nng_pipe_getopt_uint64(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_ptr"]
    pub fn nng_pipe_getopt_ptr(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_getopt_string"]
    pub fn nng_pipe_getopt_string(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_close"]
    pub fn nng_pipe_close(arg1: nng_pipe) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_id"]
    pub fn nng_pipe_id(arg1: nng_pipe) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_socket"]
    pub fn nng_pipe_socket(arg1: nng_pipe) -> nng_socket;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_dialer"]
    pub fn nng_pipe_dialer(arg1: nng_pipe) -> nng_dialer;
}
extern "C" {
    #[link_name = "\u{1}_nng_pipe_listener"]
    pub fn nng_pipe_listener(arg1: nng_pipe) -> nng_listener;
}
pub const nng_flag_enum_NNG_FLAG_ALLOC: nng_flag_enum = 1;
pub const nng_flag_enum_NNG_FLAG_NONBLOCK: nng_flag_enum = 2;
pub type nng_flag_enum = u32;
extern "C" {
    #[link_name = "\u{1}_nng_stats_get"]
    pub fn nng_stats_get(arg1: *mut *mut nng_stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_stats_free"]
    pub fn nng_stats_free(arg1: *mut nng_stat);
}
extern "C" {
    #[link_name = "\u{1}_nng_stats_dump"]
    pub fn nng_stats_dump(arg1: *mut nng_stat);
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_next"]
    pub fn nng_stat_next(arg1: *mut nng_stat) -> *mut nng_stat;
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_child"]
    pub fn nng_stat_child(arg1: *mut nng_stat) -> *mut nng_stat;
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_name"]
    pub fn nng_stat_name(arg1: *mut nng_stat) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_type"]
    pub fn nng_stat_type(arg1: *mut nng_stat) -> ::std::os::raw::c_int;
}
pub const nng_stat_type_enum_NNG_STAT_SCOPE: nng_stat_type_enum = 0;
pub const nng_stat_type_enum_NNG_STAT_LEVEL: nng_stat_type_enum = 1;
pub const nng_stat_type_enum_NNG_STAT_COUNTER: nng_stat_type_enum = 2;
pub const nng_stat_type_enum_NNG_STAT_STRING: nng_stat_type_enum = 3;
pub const nng_stat_type_enum_NNG_STAT_BOOLEAN: nng_stat_type_enum = 4;
pub const nng_stat_type_enum_NNG_STAT_ID: nng_stat_type_enum = 5;
pub type nng_stat_type_enum = u32;
extern "C" {
    #[link_name = "\u{1}_nng_stat_unit"]
    pub fn nng_stat_unit(arg1: *mut nng_stat) -> ::std::os::raw::c_int;
}
pub const nng_unit_enum_NNG_UNIT_NONE: nng_unit_enum = 0;
pub const nng_unit_enum_NNG_UNIT_BYTES: nng_unit_enum = 1;
pub const nng_unit_enum_NNG_UNIT_MESSAGES: nng_unit_enum = 2;
pub const nng_unit_enum_NNG_UNIT_MILLIS: nng_unit_enum = 3;
pub const nng_unit_enum_NNG_UNIT_EVENTS: nng_unit_enum = 4;
pub type nng_unit_enum = u32;
extern "C" {
    #[link_name = "\u{1}_nng_stat_value"]
    pub fn nng_stat_value(arg1: *mut nng_stat) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_string"]
    pub fn nng_stat_string(arg1: *mut nng_stat) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_desc"]
    pub fn nng_stat_desc(arg1: *mut nng_stat) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_nng_stat_timestamp"]
    pub fn nng_stat_timestamp(arg1: *mut nng_stat) -> u64;
}
extern "C" {
    #[link_name = "\u{1}_nng_device"]
    pub fn nng_device(arg1: nng_socket, arg2: nng_socket) -> ::std::os::raw::c_int;
}
pub const nng_errno_enum_NNG_EINTR: nng_errno_enum = 1;
pub const nng_errno_enum_NNG_ENOMEM: nng_errno_enum = 2;
pub const nng_errno_enum_NNG_EINVAL: nng_errno_enum = 3;
pub const nng_errno_enum_NNG_EBUSY: nng_errno_enum = 4;
pub const nng_errno_enum_NNG_ETIMEDOUT: nng_errno_enum = 5;
pub const nng_errno_enum_NNG_ECONNREFUSED: nng_errno_enum = 6;
pub const nng_errno_enum_NNG_ECLOSED: nng_errno_enum = 7;
pub const nng_errno_enum_NNG_EAGAIN: nng_errno_enum = 8;
pub const nng_errno_enum_NNG_ENOTSUP: nng_errno_enum = 9;
pub const nng_errno_enum_NNG_EADDRINUSE: nng_errno_enum = 10;
pub const nng_errno_enum_NNG_ESTATE: nng_errno_enum = 11;
pub const nng_errno_enum_NNG_ENOENT: nng_errno_enum = 12;
pub const nng_errno_enum_NNG_EPROTO: nng_errno_enum = 13;
pub const nng_errno_enum_NNG_EUNREACHABLE: nng_errno_enum = 14;
pub const nng_errno_enum_NNG_EADDRINVAL: nng_errno_enum = 15;
pub const nng_errno_enum_NNG_EPERM: nng_errno_enum = 16;
pub const nng_errno_enum_NNG_EMSGSIZE: nng_errno_enum = 17;
pub const nng_errno_enum_NNG_ECONNABORTED: nng_errno_enum = 18;
pub const nng_errno_enum_NNG_ECONNRESET: nng_errno_enum = 19;
pub const nng_errno_enum_NNG_ECANCELED: nng_errno_enum = 20;
pub const nng_errno_enum_NNG_ENOFILES: nng_errno_enum = 21;
pub const nng_errno_enum_NNG_ENOSPC: nng_errno_enum = 22;
pub const nng_errno_enum_NNG_EEXIST: nng_errno_enum = 23;
pub const nng_errno_enum_NNG_EREADONLY: nng_errno_enum = 24;
pub const nng_errno_enum_NNG_EWRITEONLY: nng_errno_enum = 25;
pub const nng_errno_enum_NNG_ECRYPTO: nng_errno_enum = 26;
pub const nng_errno_enum_NNG_EPEERAUTH: nng_errno_enum = 27;
pub const nng_errno_enum_NNG_ENOARG: nng_errno_enum = 28;
pub const nng_errno_enum_NNG_EAMBIGUOUS: nng_errno_enum = 29;
pub const nng_errno_enum_NNG_EBADTYPE: nng_errno_enum = 30;
pub const nng_errno_enum_NNG_EINTERNAL: nng_errno_enum = 1000;
pub const nng_errno_enum_NNG_ESYSERR: nng_errno_enum = 268435456;
pub const nng_errno_enum_NNG_ETRANERR: nng_errno_enum = 536870912;
pub type nng_errno_enum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_url {
    pub u_rawurl: *mut ::std::os::raw::c_char,
    pub u_scheme: *mut ::std::os::raw::c_char,
    pub u_userinfo: *mut ::std::os::raw::c_char,
    pub u_host: *mut ::std::os::raw::c_char,
    pub u_hostname: *mut ::std::os::raw::c_char,
    pub u_port: *mut ::std::os::raw::c_char,
    pub u_path: *mut ::std::os::raw::c_char,
    pub u_query: *mut ::std::os::raw::c_char,
    pub u_fragment: *mut ::std::os::raw::c_char,
    pub u_requri: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_nng_url() {
    assert_eq!(
        ::std::mem::size_of::<nng_url>(),
        80usize,
        concat!("Size of: ", stringify!(nng_url))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_url>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_url))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_rawurl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_rawurl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_scheme as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_userinfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_userinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_host as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_hostname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_port as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_query as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_fragment as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_requri as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_requri)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_nng_url_parse"]
    pub fn nng_url_parse(
        arg1: *mut *mut nng_url,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_url_free"]
    pub fn nng_url_free(arg1: *mut nng_url);
}
extern "C" {
    #[link_name = "\u{1}_nng_url_clone"]
    pub fn nng_url_clone(arg1: *mut *mut nng_url, arg2: *const nng_url) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_version"]
    pub fn nng_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_nng_bus0_open"]
    pub fn nng_bus0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_bus0_open_raw"]
    pub fn nng_bus0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pair0_open"]
    pub fn nng_pair0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pair0_open_raw"]
    pub fn nng_pair0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pair1_open"]
    pub fn nng_pair1_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pair1_open_raw"]
    pub fn nng_pair1_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pull0_open"]
    pub fn nng_pull0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pull0_open_raw"]
    pub fn nng_pull0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_push0_open"]
    pub fn nng_push0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_push0_open_raw"]
    pub fn nng_push0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pub0_open"]
    pub fn nng_pub0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_pub0_open_raw"]
    pub fn nng_pub0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_sub0_open"]
    pub fn nng_sub0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_sub0_open_raw"]
    pub fn nng_sub0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_rep0_open"]
    pub fn nng_rep0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_rep0_open_raw"]
    pub fn nng_rep0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_req0_open"]
    pub fn nng_req0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_req0_open_raw"]
    pub fn nng_req0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_respondent0_open"]
    pub fn nng_respondent0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_respondent0_open_raw"]
    pub fn nng_respondent0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_surveyor0_open"]
    pub fn nng_surveyor0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_surveyor0_open_raw"]
    pub fn nng_surveyor0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_inproc_register"]
    pub fn nng_inproc_register() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ipc_register"]
    pub fn nng_ipc_register() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_tcp_register"]
    pub fn nng_tcp_register() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_tls_register"]
    pub fn nng_tls_register() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_ws_register"]
    pub fn nng_ws_register() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nng_wss_register"]
    pub fn nng_wss_register() -> ::std::os::raw::c_int;
}
pub const nng_zt_status_NNG_ZT_STATUS_UP: nng_zt_status = 0;
pub const nng_zt_status_NNG_ZT_STATUS_CONFIG: nng_zt_status = 1;
pub const nng_zt_status_NNG_ZT_STATUS_DENIED: nng_zt_status = 2;
pub const nng_zt_status_NNG_ZT_STATUS_NOTFOUND: nng_zt_status = 3;
pub const nng_zt_status_NNG_ZT_STATUS_ERROR: nng_zt_status = 4;
pub const nng_zt_status_NNG_ZT_STATUS_OBSOLETE: nng_zt_status = 5;
pub const nng_zt_status_NNG_ZT_STATUS_UNKNOWN: nng_zt_status = 6;
pub type nng_zt_status = u32;
extern "C" {
    #[link_name = "\u{1}_nng_zt_register"]
    pub fn nng_zt_register() -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
